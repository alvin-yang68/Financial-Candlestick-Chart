{"version":3,"sources":["charts/AxisBottom.js","charts/AxisLeft.js","charts/AxisRight.js","charts/CandlestickMarks.js","charts/VolumeMarks.js","charts/StockChart.js","charts/useData.js","App.js","reportWebVitals.js","index.js"],"names":["AxisBottom","xScale","innerWidth","innerHeight","axisOffset","tickFormat","utcFormat","ticks","domain","filter","d","getUTCDay","map","tickValue","className","transform","y2","y1","style","textAnchor","dy","y","x1","bandwidth","x2","AxisLeft","yScale","format","x","AxisRight","CandlestickMarks","data","formatDate","formatValue","formatString","date","low","high","open","close","strokeWidth","stroke","schemeSet1","data-tip","volume","data-for","VolumeMarks","width","height","margin","StockChart","useState","setData","useEffect","csv","Date","then","useData","dataWindowEnd","length","dataWindowStart","slice","d3","range","padding","yPriceScale","rangeRound","nice","yVolumeScale","id","place","effect","html","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+NAEaA,EAAa,SAAC,GAAqD,IAAnDC,EAAkD,EAAlDA,OAAQC,EAA0C,EAA1CA,WAAYC,EAA8B,EAA9BA,YAAaC,EAAiB,EAAjBA,WACpDC,EAAaC,YAAU,WAIvBC,EAAQN,EAAOO,SAChBC,QAHc,SAAAC,GAAC,OAAsB,IAAlBA,EAAEC,eAIrBC,KAAI,SAAAC,GAAS,OACV,oBACIC,UAAU,OAEVC,UAAS,oBAAed,EAAOY,GAAtB,OAHb,UAKI,sBAAMG,GAAIb,EAAcC,IACxB,sBACIU,UAAU,OACVG,GAAId,EAAcC,EAClBY,GAAIb,EAAcC,EAAa,IAEnC,sBACIc,MAAO,CAAEC,WAAY,UACrBC,GAAG,QACHC,EAAGlB,EAAcC,EAAa,GAHlC,SAKKC,EAAWQ,OAdXA,MAmBjB,OACI,qCACKN,EACD,sBACIO,UAAU,cACVG,GAAId,EAAcC,EAClBY,GAAIb,EAAcC,EAClBkB,IAAKrB,EAAOsB,YAAc,EAC1BC,GAAItB,EAAaD,EAAOsB,YAAc,QCrCzCE,EAAW,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,OAAQvB,EAA8B,EAA9BA,YAAaC,EAAiB,EAAjBA,WACtCC,EAAasB,YAAO,OAEpBpB,EAAQmB,EAAOnB,QAAQK,KAAI,SAAAC,GAAS,OACtC,oBACIC,UAAU,OAEVC,UAAS,sBAAiBW,EAAOb,GAAxB,KAHb,UAKI,sBACIC,UAAU,OACVQ,GAAIlB,EAAa,EACjBoB,GAAIpB,IAER,sBACIc,MAAO,CAAEC,WAAY,OACrBS,EAAGxB,EAAa,GAChBgB,GAAG,QAHP,SAKKf,EAAWQ,OAbXA,MAkBb,OACI,qCACKN,EACD,sBACIO,UAAU,cACVQ,GAAIlB,EACJoB,GAAIpB,EACJY,GAAIb,QC/BP0B,EAAY,SAAC,GAAqD,IAAnDH,EAAkD,EAAlDA,OAAQxB,EAA0C,EAA1CA,WAAYC,EAA8B,EAA9BA,YAAaC,EAAiB,EAAjBA,WACnDC,EAAasB,YAAO,MAEpBpB,EAAQmB,EAAOnB,QAAQK,KAAI,SAAAC,GAAS,OACtC,oBACIC,UAAU,OAEVC,UAAS,oBAAeb,EAAf,YAA6BwB,EAAOb,GAApC,KAHb,UAKI,sBACIC,UAAU,OACVQ,GAAIlB,EAAa,EACjBoB,GAAIpB,IAER,sBACIc,MAAO,CAAEC,WAAY,SACrBS,EAAGxB,EAAa,GAChBgB,GAAG,QAHP,SAKKf,EAAWQ,OAbXA,MAkBb,OACI,qCACKN,EACD,sBACIO,UAAU,cACVQ,GAAIpB,EAAaE,EACjBoB,GAAItB,EAAaE,EACjBY,GAAIb,QC/BP2B,EAAmB,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,KAAM9B,EAAqB,EAArBA,OAAQyB,EAAa,EAAbA,OACvCM,EAAa1B,YAAU,cACvB2B,EAAcN,YAAO,OACrBO,EAAeP,YAAO,OAE5B,OAAOI,EAAKnB,KAAI,SAAAF,GAAC,OACb,oBAAGI,UAAU,mBAAgCC,UAAS,oBAAed,EAAOS,EAAEyB,MAAxB,OAAtD,UACI,sBACIlB,GAAIS,EAAOhB,EAAE0B,KACbpB,GAAIU,EAAOhB,EAAE2B,QAEjB,sBACIpB,GAAIS,EAAOhB,EAAE4B,MACbtB,GAAIU,EAAOhB,EAAE6B,OACbC,YAAavC,EAAOsB,YACpBkB,OACI/B,EAAE4B,KAAO5B,EAAE6B,MAAQG,IAAW,GACxBhC,EAAE6B,MAAQ7B,EAAE4B,KAAOI,IAAW,GAC1BA,IAAW,GAEzBC,WACI,aAAMX,EAAWtB,EAAEyB,MAAnB,+BACUF,EAAYvB,EAAE4B,MADxB,4BAEWL,EAAYvB,EAAE6B,OAFzB,0BAGSN,EAAYvB,EAAE0B,KAHvB,2BAIUH,EAAYvB,EAAE2B,MAJxB,4BAKWH,EAAaxB,EAAEkC,SAE9BC,WAAS,mBAtBoBnC,EAAEyB,UCRlCW,EAAc,SAAC,GAAD,IAAGf,EAAH,EAAGA,KAAM9B,EAAT,EAASA,OAAQyB,EAAjB,EAAiBA,OAAQvB,EAAzB,EAAyBA,YAAzB,OACvB4B,EAAKnB,KAAI,SAAAF,GAAC,OACN,sBACII,UAAU,cAEVc,EAAG3B,EAAOS,EAAEyB,MAAQlC,EAAOsB,YAAc,EACzCF,EAAGK,EAAOhB,EAAEkC,QACZG,MAAO9C,EAAOsB,YACdyB,OAAQ7C,EAAcuB,EAAOhB,EAAEkC,SAJ1BlC,EAAEkC,YCSbK,EAAgB,GAAhBA,EAA2B,GAA3BA,EAAuC,GAAvCA,EAAiD,GAO1CC,EAAa,WACtB,IAAInB,EChBe,WAAO,IAAD,EACDoB,mBAAS,MADR,mBAClBpB,EADkB,KACZqB,EADY,KAgBzB,OAbAC,qBAAU,WAUNC,YAfO,6GAMK,SAAA5C,GAOR,OANAA,EAAEyB,KAAO,IAAIoB,KAAK7C,EAAEyB,MACpBzB,EAAEkC,QAAUlC,EAAEkC,OACdlC,EAAE4B,MAAQ5B,EAAE4B,KACZ5B,EAAE6B,OAAS7B,EAAE6B,MACb7B,EAAE2B,MAAQ3B,EAAE2B,KACZ3B,EAAE0B,KAAO1B,EAAE0B,IACJ1B,KAEM8C,KAAKJ,KACvB,IAEIrB,EDAI0B,GAEX,IAAK1B,EACD,OAAO,6CAGX,IAAM2B,EAAgB3B,EAAK4B,OAXN,EAYfC,EAAkBF,EAbL,IAcnB3B,EAAOA,EAAK8B,MAAMD,EAAiBF,GAEnC,IAAMxD,EApBI,KAoBiB+C,EAAcA,EACnC9C,EApBK,IAoBkB8C,EAAaA,EAEpChD,EAAS6D,MACVtD,OAAOsD,IACHC,MAAMhC,EAAK,GAAGI,MAAOJ,EAAKA,EAAK4B,OAAS,GAAGxB,KAAO,GAClD1B,QAAO,SAAAC,GAAC,OAAsB,IAAlBA,EAAEC,aAAuC,IAAlBD,EAAEC,gBACzCoD,MAAM,CAAC,EAAG7D,IACV8D,QAAQ,IAEPC,EAAcH,MACftD,OAAO,CAACsD,IAAO/B,GAAM,SAAArB,GAAC,OAAIA,EAAE0B,OAAM0B,IAAO/B,GAAM,SAAArB,GAAC,OAAIA,EAAE2B,UACtD6B,WAAW,CAAC/D,EAAa,IACzBgE,OAECC,EAAeN,MAChBtD,OAAOsD,IAAU/B,GAAM,SAAArB,GAAC,OAAIA,EAAEkC,WAC9BsB,WAAW,CAAC/D,EAAa,IACzBgE,OAEL,OACI,qCACI,qBAAKpB,MA1CH,KA0CiBC,OAzChB,IAyCH,SACI,oBAAGjC,UAAS,oBAAekC,EAAf,YAA8BA,EAA9B,KAAZ,UACI,cAAC,EAAD,CACIhD,OAAQA,EACRC,WAAYA,EACZC,YAAaA,EACbC,WAAY,IAEhB,cAAC,EAAD,CACIsB,OAAQuC,EACR9D,YAAaA,EACbC,YAAaH,EAAOsB,YAAc,IAEtC,sBACIT,UAAU,aACVK,WAAW,SACXJ,UAAS,qBAnDR,GAmDQ,YAAoCZ,EAAc,EAAlD,iBAHb,mBAOA,cAAC,EAAD,CACIuB,OAAQ0C,EACRlE,WAAYA,EACZC,YAAaA,EACbC,WAAYH,EAAOsB,YAAc,IAErC,sBACIT,UAAU,aACVK,WAAW,SACXJ,UAAS,oBAAeb,EAhEvB,GAgEQ,YAAgDC,EAAc,EAA9D,gBAHb,oBAOA,cAAC,EAAD,CACI4B,KAAMA,EACN9B,OAAQA,EACRyB,OAAQ0C,EACRjE,YAAaA,IAEjB,cAAC,EAAD,CACI4B,KAAMA,EACN9B,OAAQA,EACRyB,OAAQuC,SAIpB,cAAC,IAAD,CAAcI,GAAG,eAAeC,MAAM,QAAQC,OAAO,QAAQC,MAAM,QEzFhEC,MARf,WACE,OACE,mCACE,cAAC,EAAD,OCOSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBpB,MAAK,YAAkD,IAA/CqB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.503cd640.chunk.js","sourcesContent":["import { utcFormat } from 'd3';\r\n\r\nexport const AxisBottom = ({ xScale, innerWidth, innerHeight, axisOffset }) => {\r\n    const tickFormat = utcFormat('%-m/%-d');\r\n\r\n    const onlyMonday = d => d.getUTCDay() === 1;\r\n\r\n    const ticks = xScale.domain()\r\n        .filter(onlyMonday)\r\n        .map(tickValue => (\r\n            <g\r\n                className='axis'\r\n                key={tickValue}\r\n                transform={`translate(${xScale(tickValue)},0)`}\r\n            >\r\n                <line y2={innerHeight + axisOffset} />\r\n                <line\r\n                    className='tick'\r\n                    y1={innerHeight + axisOffset}\r\n                    y2={innerHeight + axisOffset + 6}\r\n                />\r\n                <text\r\n                    style={{ textAnchor: 'middle' }}\r\n                    dy=\".71em\"\r\n                    y={innerHeight + axisOffset + 14}\r\n                >\r\n                    {tickFormat(tickValue)}\r\n                </text>\r\n            </g>\r\n        ))\r\n\r\n    return (\r\n        <>\r\n            {ticks}\r\n            <line\r\n                className='axis-border'\r\n                y1={innerHeight + axisOffset}\r\n                y2={innerHeight + axisOffset}\r\n                x1={-xScale.bandwidth() / 2}\r\n                x2={innerWidth + xScale.bandwidth() / 2}\r\n            />\r\n        </>\r\n    )\r\n}","import { format } from 'd3';\r\n\r\nexport const AxisLeft = ({ yScale, innerHeight, axisOffset }) => {\r\n    const tickFormat = format('$~f');\r\n\r\n    const ticks = yScale.ticks().map(tickValue => (\r\n        <g\r\n            className='axis'\r\n            key={tickValue}\r\n            transform={`translate(0,${yScale(tickValue)})`}\r\n        >\r\n            <line\r\n                className='tick'\r\n                x1={axisOffset - 6}\r\n                x2={axisOffset}\r\n            />\r\n            <text\r\n                style={{ textAnchor: 'end' }}\r\n                x={axisOffset - 12}\r\n                dy=\".32em\"\r\n            >\r\n                {tickFormat(tickValue)}\r\n            </text>\r\n        </g>\r\n    ))\r\n\r\n    return (\r\n        <>\r\n            {ticks}\r\n            <line\r\n                className='axis-border'\r\n                x1={axisOffset}\r\n                x2={axisOffset}\r\n                y2={innerHeight}\r\n            />\r\n        </>\r\n    )\r\n}","import { format } from 'd3';\r\n\r\nexport const AxisRight = ({ yScale, innerWidth, innerHeight, axisOffset }) => {\r\n    const tickFormat = format('~s');\r\n\r\n    const ticks = yScale.ticks().map(tickValue => (\r\n        <g\r\n            className='axis'\r\n            key={tickValue}\r\n            transform={`translate(${innerWidth},${yScale(tickValue)})`}\r\n        >\r\n            <line\r\n                className='tick'\r\n                x1={axisOffset + 6}\r\n                x2={axisOffset}\r\n            />\r\n            <text\r\n                style={{ textAnchor: 'start' }}\r\n                x={axisOffset + 12}\r\n                dy=\".32em\"\r\n            >\r\n                {tickFormat(tickValue)}\r\n            </text>\r\n        </g>\r\n    ))\r\n\r\n    return (\r\n        <>\r\n            {ticks}\r\n            <line\r\n                className='axis-border'\r\n                x1={innerWidth + axisOffset}\r\n                x2={innerWidth + axisOffset}\r\n                y2={innerHeight}\r\n            />\r\n        </>\r\n    )\r\n}","import { utcFormat, format, schemeSet1 } from 'd3';\r\n\r\nexport const CandlestickMarks = ({ data, xScale, yScale }) => {\r\n    const formatDate = utcFormat('%B %-d, %Y');\r\n    const formatValue = format('.2f');\r\n    const formatString = format('.3s');\r\n\r\n    return data.map(d => (\r\n        <g className='candlestick-mark' key={d.date} transform={`translate(${xScale(d.date)},0)`}>\r\n            <line\r\n                y1={yScale(d.low)}\r\n                y2={yScale(d.high)}\r\n            />\r\n            <line\r\n                y1={yScale(d.open)}\r\n                y2={yScale(d.close)}\r\n                strokeWidth={xScale.bandwidth()}\r\n                stroke={\r\n                    d.open > d.close ? schemeSet1[0]\r\n                        : d.close > d.open ? schemeSet1[2]\r\n                            : schemeSet1[8]\r\n                }\r\n                data-tip={\r\n                    `<b>${formatDate(d.date)}</b><br />` +\r\n                    `Open: $${formatValue(d.open)}<br />` +\r\n                    `Close: $${formatValue(d.close)}<br />` +\r\n                    `Low: $${formatValue(d.low)}<br />` +\r\n                    `High: $${formatValue(d.high)}<br />` +\r\n                    `Volume: ${formatString(d.volume)}`\r\n                }\r\n                data-for='mark-tooltip'\r\n            />\r\n        </g>\r\n    ))\r\n}","export const VolumeMarks = ({ data, xScale, yScale, innerHeight }) => (\r\n    data.map(d => (\r\n        <rect\r\n            className='volume-mark'\r\n            key={d.volume}\r\n            x={xScale(d.date) - xScale.bandwidth() / 2}\r\n            y={yScale(d.volume)}\r\n            width={xScale.bandwidth()}\r\n            height={innerHeight - yScale(d.volume)}\r\n        />\r\n    ))\r\n)","import * as d3 from 'd3';\r\nimport ReactTooltip from 'react-tooltip';\r\n\r\nimport '../styles/charts.css';\r\nimport { useData } from './useData';\r\nimport { AxisBottom } from './AxisBottom';\r\nimport { AxisLeft } from './AxisLeft';\r\nimport { AxisRight } from './AxisRight';\r\nimport { CandlestickMarks } from './CandlestickMarks';\r\nimport { VolumeMarks } from './VolumeMarks';\r\n\r\nconst width = 1200;\r\nconst height = 600;\r\nconst margin = { top: 20, right: 80, bottom: 40, left: 80 };\r\n\r\nconst dataWindowSize = 130;\r\nconst dataWindowOffset = 0;\r\n\r\nconst yAxisLabelOffset = 60;\r\n\r\nexport const StockChart = () => {\r\n    let data = useData();\r\n\r\n    if (!data) {\r\n        return <pre>Loading...</pre>;\r\n    }\r\n\r\n    const dataWindowEnd = data.length - dataWindowOffset;\r\n    const dataWindowStart = dataWindowEnd - dataWindowSize;\r\n    data = data.slice(dataWindowStart, dataWindowEnd);\r\n\r\n    const innerWidth = width - margin.left - margin.right;\r\n    const innerHeight = height - margin.top - margin.bottom;\r\n\r\n    const xScale = d3.scaleBand()\r\n        .domain(d3.utcDay\r\n            .range(data[0].date, +data[data.length - 1].date + 1)\r\n            .filter(d => d.getUTCDay() !== 0 && d.getUTCDay() !== 6))\r\n        .range([0, innerWidth])\r\n        .padding(0.2);\r\n\r\n    const yPriceScale = d3.scaleLinear()\r\n        .domain([d3.min(data, d => d.low), d3.max(data, d => d.high)])\r\n        .rangeRound([innerHeight, 0])\r\n        .nice();\r\n\r\n    const yVolumeScale = d3.scaleLinear()\r\n        .domain(d3.extent(data, d => d.volume))\r\n        .rangeRound([innerHeight, 0])\r\n        .nice();\r\n\r\n    return (\r\n        <>\r\n            <svg width={width} height={height}>\r\n                <g transform={`translate(${margin.left},${margin.top})`}>\r\n                    <AxisBottom\r\n                        xScale={xScale}\r\n                        innerWidth={innerWidth}\r\n                        innerHeight={innerHeight}\r\n                        axisOffset={0}\r\n                    />\r\n                    <AxisLeft\r\n                        yScale={yPriceScale}\r\n                        innerHeight={innerHeight}\r\n                        axisOffset={-xScale.bandwidth() / 2}\r\n                    />\r\n                    <text\r\n                        className='axis-label'\r\n                        textAnchor='middle'\r\n                        transform={`translate(${-yAxisLabelOffset},${innerHeight / 2}) rotate(-90)`}\r\n                    >\r\n                        Price\r\n                    </text>\r\n                    <AxisRight\r\n                        yScale={yVolumeScale}\r\n                        innerWidth={innerWidth}\r\n                        innerHeight={innerHeight}\r\n                        axisOffset={xScale.bandwidth() / 2}\r\n                    />\r\n                    <text\r\n                        className='axis-label'\r\n                        textAnchor='middle'\r\n                        transform={`translate(${innerWidth + yAxisLabelOffset},${innerHeight / 2}) rotate(90)`}\r\n                    >\r\n                        Volume\r\n                    </text>\r\n                    <VolumeMarks\r\n                        data={data}\r\n                        xScale={xScale}\r\n                        yScale={yVolumeScale}\r\n                        innerHeight={innerHeight}\r\n                    />\r\n                    <CandlestickMarks\r\n                        data={data}\r\n                        xScale={xScale}\r\n                        yScale={yPriceScale}\r\n                    />\r\n                </g>\r\n            </svg>\r\n            <ReactTooltip id='mark-tooltip' place='right' effect='solid' html={true} />\r\n        </>\r\n    )\r\n}","import { useState, useEffect } from 'react';\r\nimport { csv } from 'd3';\r\n\r\nconst csvUrl = 'https://gist.githubusercontent.com/alvin-yang68/825378ee22558f0ced78a2ca74c931a7/raw/AAPLStockHistory.csv'\r\n\r\nexport const useData = () => {\r\n    const [data, setData] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const row = d => {\r\n            d.date = new Date(d.date);\r\n            d.volume = +d.volume;\r\n            d.open = +d.open;\r\n            d.close = +d.close;\r\n            d.high = +d.high;\r\n            d.low = +d.low;\r\n            return d;\r\n        }\r\n        csv(csvUrl, row).then(setData);\r\n    }, [])\r\n\r\n    return data;\r\n}","import { StockChart } from './charts/StockChart'\n\nfunction App() {\n  return (\n    <>\n      <StockChart />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}