{"version":3,"sources":["charts/Axis/AxisBottom.js","charts/Axis/AxisLeft.js","charts/Axis/AxisRight.js","charts/Marks/CandlestickMarks.js","charts/Marks/EventMarks.js","charts/Marks/VolumeMarks.js","charts/Main.js","charts/Marks/LineMarks.js","charts/Brush.js","charts/StockChart.js","charts/useData.js","App.js","reportWebVitals.js","index.js"],"names":["AxisBottom","xScale","xLength","filterCondition","bandwidthOffset","yOffset","axisLine","tickFormat","ticks","domain","filter","map","tickValue","className","transform","y2","y1","style","textAnchor","dy","y","x1","x2","AxisLeft","yScale","yLength","xOffset","numTicks","x","AxisRight","formatDate","utcFormat","formatValue","format","formatString","CandlestickMarks","data","d","date","low","high","open","close","strokeWidth","bandwidth","stroke","schemeSet1","data-tip","volume","data-for","EventMarks","innerHeight","eventTitle","fill","onClick","eventCallback","VolumeMarks","width","height","leftAxisTickFormat","d3","rightAxisTickFormat","bottomAxisTickFormat","Main","specs","margin","innerWidth","left","right","top","bottom","range","length","getUTCDay","padding","yPriceScale","rangeRound","nice","yVolumeScale","LineMarks","area","y0","curve","curveNatural","Brush","yAxisNumTicks","initialBrushExtent","setBrushExtent","brushRef","useRef","useMemo","useEffect","brush","extent","on","event","selection","scale","paddingOuter","eachBand","step","value","index","Math","floor","max","min","scaleBandInvert","brushObj","current","move","getUTCDate","getUTCMonth","ref","StockChart","totalWidth","totalHeight","seperationRatio","brushSpecs","mainChartSpecs","useState","setData","csv","Date","random","console","log","then","useData","brushExtent","ReactTooltip","rebuild","brushSize","slicedData","id","place","effect","html","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sOAAaA,EAAa,SAAC,GAA0G,IAAxGC,EAAuG,EAAvGA,OAAQC,EAA+F,EAA/FA,QAASC,EAAsF,EAAtFA,gBAAsF,IAArEC,uBAAqE,MAAnD,EAAmD,MAAhDC,eAAgD,MAAtC,EAAsC,MAAnCC,gBAAmC,SAAjBC,EAAiB,EAAjBA,WACzGC,EAAQP,EAAOQ,SAChBC,OAAOP,GACPQ,KAAI,SAAAC,GAAS,OACV,oBACIC,UAAU,OAEVC,UAAS,oBAAeb,EAAOW,GAAtB,OAHb,UAKKN,GAAY,sBAAMS,GAAIV,IACvB,sBACIQ,UAAU,OACVG,GAAIX,EACJU,GAAIV,EAAU,IAElB,sBACIY,MAAO,CAAEC,WAAY,UACrBC,GAAG,QACHC,EAAGf,EAAU,GAHjB,SAKKE,EAAWK,OAdXA,MAmBjB,OACI,qCACKJ,EACD,sBACIK,UAAU,cACVG,GAAIX,EACJU,GAAIV,EACJgB,IAAKjB,EACLkB,GAAIpB,EAAUE,QCjCjBmB,EAAW,SAAC,GAAmE,IAAjEC,EAAgE,EAAhEA,OAAQC,EAAwD,EAAxDA,QAAwD,IAA/CC,eAA+C,MAArC,EAAqC,MAAlCC,gBAAkC,MAAvB,KAAuB,EAAjBpB,EAAiB,EAAjBA,WAChEC,EAAQgB,EAAOhB,MAAMmB,GAAUhB,KAAI,SAAAC,GAAS,OAC9C,oBACIC,UAAU,OAEVC,UAAS,sBAAiBU,EAAOZ,GAAxB,KAHb,UAKI,sBACIC,UAAU,OACVQ,GAAIK,EAAU,EACdJ,GAAII,IAER,sBACIT,MAAO,CAAEC,WAAY,OACrBU,EAAGF,EAAU,GACbP,GAAG,QAHP,SAKKZ,EAAWK,OAbXA,MAkBb,OACI,qCACKJ,EACD,sBACIK,UAAU,cACVQ,GAAIK,EACJJ,GAAII,EACJX,GAAIU,QC7BPI,EAAY,SAAC,GAAmE,IAAjEL,EAAgE,EAAhEA,OAAQC,EAAwD,EAAxDA,QAAwD,IAA/CC,eAA+C,MAArC,EAAqC,MAAlCC,gBAAkC,MAAvB,KAAuB,EAAjBpB,EAAiB,EAAjBA,WACjEC,EAAQgB,EAAOhB,MAAMmB,GAAUhB,KAAI,SAAAC,GAAS,OAC9C,oBACIC,UAAU,OAEVC,UAAS,sBAAiBU,EAAOZ,GAAxB,KAHb,UAKI,sBACIC,UAAU,OACVQ,GAAIK,EAAU,EACdJ,GAAII,IAER,sBACIT,MAAO,CAAEC,WAAY,SACrBU,EAAGF,EAAU,GACbP,GAAG,QAHP,SAKKZ,EAAWK,OAbXA,MAkBb,OACI,qCACKJ,EACD,sBACIK,UAAU,cACVQ,GAAIK,EACJJ,GAAII,EACJX,GAAIU,QC3BdK,EAAaC,YAAU,cACvBC,EAAcC,YAAO,OACrBC,EAAeD,YAAO,OAEfE,EAAmB,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMnC,EAAT,EAASA,OAAQuB,EAAjB,EAAiBA,OAAjB,OAC5BY,EAAKzB,KAAI,SAAA0B,GAAC,OACN,oBAAGxB,UAAU,mBAAgCC,UAAS,oBAAeb,EAAOoC,EAAEC,MAAxB,OAAtD,UACI,sBACItB,GAAIQ,EAAOa,EAAEE,KACbxB,GAAIS,EAAOa,EAAEG,QAEjB,sBACIxB,GAAIQ,EAAOa,EAAEI,MACb1B,GAAIS,EAAOa,EAAEK,OACbC,YAAa1C,EAAO2C,YACpBC,OACIR,EAAEI,KAAOJ,EAAEK,MAAQI,IAAW,GACxBT,EAAEK,MAAQL,EAAEI,KAAOK,IAAW,GAC1BA,IAAW,GAEzBC,WACI,aAAMjB,EAAWO,EAAEC,MAAnB,+BACUN,EAAYK,EAAEI,MADxB,4BAEWT,EAAYK,EAAEK,OAFzB,0BAGSV,EAAYK,EAAEE,KAHvB,2BAIUP,EAAYK,EAAEG,MAJxB,4BAKWN,EAAaG,EAAEW,SAE9BC,WAAS,mBAtBoBZ,EAAEC,UCRlCY,EAAa,SAAC,GAAD,IAAGd,EAAH,EAAGA,KAAMnC,EAAT,EAASA,OAAQkD,EAAjB,EAAiBA,YAAjB,OACtBf,EAAKzB,KAAI,SAAA0B,GAAC,OACNA,EAAEe,YACE,mBACItC,UAAS,oBAAeb,EAAOoC,EAAEC,MAAxB,YAAiCa,EAAjC,yBACTE,KAAK,UACLR,OAAO,OACPE,WAAUV,EAAEe,WACZH,WAAS,eACTK,QAASjB,EAAEkB,cANf,SAQI,sBAAMlB,EAAE,slBCXXmB,EAAc,SAAC,GAAD,IAAGpB,EAAH,EAAGA,KAAMnC,EAAT,EAASA,OAAQuB,EAAjB,EAAiBA,OAAQ2B,EAAzB,EAAyBA,YAAzB,OACvBf,EAAKzB,KAAI,SAAA0B,GAAC,OACN,sBACIxB,UAAU,cAEVe,EAAG3B,EAAOoC,EAAEC,MAAQrC,EAAO2C,YAAc,EACzCxB,EAAGI,EAAOa,EAAEW,QACZS,MAAOxD,EAAO2C,YACdc,OAAQP,EAAc3B,EAAOa,EAAEW,SAJ1BX,EAAEC,UCObqB,EAAqBC,IAAU,OAC/BC,EAAsBD,IAAU,MAChCE,EAAuBF,IAAa,WAE7BG,EAAO,SAAC,GAGd,IAFH3B,EAEE,EAFFA,KAEE,IADF4B,MAASP,EACP,EADOA,MAAOC,EACd,EADcA,OAAQO,EACtB,EADsBA,OAElBC,EAAaT,EAAQQ,EAAOE,KAAOF,EAAOG,MAC1CjB,EAAcO,EAASO,EAAOI,IAAMJ,EAAOK,OAE3CrE,EAAS2D,MACVnD,OAAOmD,IACHW,MAAMnC,EAAK,GAAGE,MAAOF,EAAKA,EAAKoC,OAAS,GAAGlC,KAAO,GAClD5B,QAAO,SAAA2B,GAAC,OAAsB,IAAlBA,EAAEoC,aAAuC,IAAlBpC,EAAEoC,gBACzCF,MAAM,CAAC,EAAGL,IACVQ,QAAQ,IAEPC,EAAcf,MACfnD,OAAO,CAACmD,IAAOxB,GAAM,SAAAC,GAAC,OAAIA,EAAEE,OAAMqB,IAAOxB,GAAM,SAAAC,GAAC,OAAIA,EAAEG,UACtDoC,WAAW,CAACzB,EAAa,IACzB0B,OAECC,EAAelB,MAChBnD,OAAO,CAAC,EAAGmD,IAAOxB,GAAM,SAAAC,GAAC,OAAIA,EAAEW,YAC/B4B,WAAW,CAACzB,EAAa,IACzB0B,OAIL,OACI,oBAAG/D,UAAS,oBAAemD,EAAOE,KAAtB,YAA8BF,EAAOI,IAArC,KAAZ,UACI,cAAC,EAAD,CACIpE,OAAQA,EACRC,QAASgE,EACT/D,gBAPU,SAAAkC,GAAC,OAAsB,IAAlBA,EAAEoC,aAQjBpE,QAAS8C,EACT/C,gBAAiBH,EAAO2C,YAAc,EACtCtC,UAAU,EACVC,WAAYuD,IAEhB,cAAC,EAAD,CACItC,OAAQmD,EACRlD,QAAS0B,EACTzB,SAAUzB,EAAO2C,YAAc,EAC/BrC,WAAYoD,IAEhB,sBACI9C,UAAU,aACVK,WAAW,SACXJ,UAAS,qBApDA,GAoDA,YAAoCqC,EAAc,EAAlD,iBAHb,mBAOA,cAAC,EAAD,CACI3B,OAAQsD,EACRrD,QAAS0B,EACTzB,QAASwC,EAAajE,EAAO2C,YAAc,EAC3CrC,WAAYsD,IAEhB,sBACIhD,UAAU,aACVK,WAAW,SACXJ,UAAS,oBAAeoD,EAjEf,GAiEA,YAAgDf,EAAc,EAA9D,gBAHb,oBAOA,cAAC,EAAD,CACIf,KAAMA,EACNnC,OAAQA,EACRuB,OAAQsD,EACR3B,YAAaA,IAEjB,cAAC,EAAD,CACIf,KAAMA,EACNnC,OAAQA,EACRuB,OAAQmD,IAEZ,cAAC,EAAD,CACIvC,KAAMA,EACNnC,OAAQA,EACRkD,YAAaA,QC1FhB4B,EAAY,SAAC,GAAD,IAAG3C,EAAH,EAAGA,KAAMnC,EAAT,EAASA,OAAQuB,EAAjB,EAAiBA,OAAjB,OACrB,sBACIX,UAAU,YACVwB,EAAG2C,cACEpD,GAAE,SAAAS,GAAC,OAAIpC,EAAOoC,EAAEC,SAChB2C,GAAGzD,EAAO,IACVR,IAAG,SAAAqB,GAAC,OAAIb,EAAOa,EAAEK,UACjBwC,MAAMC,IAJRH,CAIsB5C,MCA3BuB,EAAqBC,IAAU,OAC/BE,EAAuBF,IAAa,MAY7BwB,EAAQ,SAAC,GAKf,IAJHhD,EAIE,EAJFA,KAIE,IAHF4B,MAASP,EAGP,EAHOA,MAAOC,EAGd,EAHcA,OAAQO,EAGtB,EAHsBA,OAAQoB,EAG9B,EAH8BA,cAChCC,EAEE,EAFFA,mBACAC,EACE,EADFA,eAEMC,EAAWC,mBAEXvB,EAAaT,EAAQQ,EAAOE,KAAOF,EAAOG,MAC1CjB,EAAcO,EAASO,EAAOI,IAAMJ,EAAOK,OAE3CrE,EAASyF,mBACX,kBAAM9B,MACDnD,OAAOmD,IACHW,MAAMnC,EAAK,GAAGE,MAAOF,EAAKA,EAAKoC,OAAS,GAAGlC,KAAO,GAClD5B,QAAO,SAAA2B,GAAC,OAAsB,IAAlBA,EAAEoC,aAAuC,IAAlBpC,EAAEoC,gBACzCF,MAAM,CAAC,EAAGL,IACVQ,QAAQ,MACX,CAACtC,EAAM8B,IAGPS,EAAce,mBAChB,kBAAM9B,MACDnD,OAAO,CAAC,EAAGmD,IAAOxB,GAAM,SAAAC,GAAC,OAAIA,EAAEG,UAC/B+B,MAAM,CAACpB,EAAa,IACpB0B,SACH,CAACzC,EAAMe,IAGbwC,qBAAU,WACN,IAAMC,EAAQhC,MACTiC,OAAO,CAAC,CAAC,EAAG,GAAI,CAAC3B,EAAYf,KAC7B2C,GAAG,SAAS,SAACC,GACVR,EAAeQ,EAAMC,WAAaD,EAAMC,UAAUrF,IA3C1C,SAAAsF,GACpB,IAAMxF,EAASwF,EAAMxF,SACfyF,EAAeD,EAAMxF,EAAO,IAC5B0F,EAAWF,EAAMG,OACvB,OAAQ,SAAAC,GACJ,IAAMC,EAAQC,KAAKC,OAAQH,EAAQH,GAAgBC,GACnD,OAAO1F,EAAO8F,KAAKE,IAAI,EAAGF,KAAKG,IAAIJ,EAAO7F,EAAO+D,OAAS,MAqCImC,CAAgB1G,QAExE2G,EAAWhD,IAAU4B,EAASqB,SACpCjB,EAAMgB,GACNhB,EAAMkB,KAAKF,EAAU,CAAC3G,EAAOqF,EAAmB,IAAKrF,EAAOqF,EAAmB,QAChF,CAACrF,EAAQiE,EAAYf,IAMxB,OACI,oBAAGrC,UAAS,oBAAemD,EAAOE,KAAtB,YAA8BF,EAAOI,IAArC,KAAZ,UACI,cAAC,EAAD,CACIjC,KAAMA,EACNnC,OAAQA,EACRuB,OAAQmD,IAEZ,cAAC,EAAD,CACI1E,OAAQA,EACRC,QAASgE,EACT7D,QAAS8C,EACThD,gBAfiB,SAAAkC,GAAC,OACP,IAAlBA,EAAEoC,aAAuBpC,EAAE0E,cAAgB,GAA2B,IAApB1E,EAAE2E,eAe7CzG,WAAYuD,IAEhB,cAAC,EAAD,CACItC,OAAQmD,EACRlD,QAAS0B,EACTxB,SAAU0D,EACV9E,WAAYoD,IAEhB,sBACI9C,UAAU,aACVK,WAAW,SACXJ,UAAS,qBAlFA,GAkFA,YAAoCqC,EAAc,EAAlD,iBAHb,mBAOA,mBAAG8D,IAAKzB,QCrFP0B,EAAa,SAAC,GAQpB,IAAD,IAPFlD,MACImD,EAMF,EANEA,WACAC,EAKF,EALEA,YACAC,EAIF,EAJEA,gBACAC,EAGF,EAHEA,WACAC,EAEF,EAFEA,eAGEnF,ECZa,WAAO,IAAD,EACDoF,mBAAS,MADR,mBAClBpF,EADkB,KACZqF,EADY,KAkBzB,OAfA9B,qBAAU,WAYN+B,YAjBO,6GAMK,SAAArF,GASR,OARAA,EAAEC,KAAO,IAAIqF,KAAKtF,EAAEC,MACpBD,EAAEW,QAAUX,EAAEW,OACdX,EAAEI,MAAQJ,EAAEI,KACZJ,EAAEK,OAASL,EAAEK,MACbL,EAAEG,MAAQH,EAAEG,KACZH,EAAEE,KAAOF,EAAEE,IACXF,EAAEe,WAAamD,KAAKqB,SAAW,IAAO,mBAAqB,KAC3DvF,EAAEkB,cAAgB,kBAAMsE,QAAQC,IAAI,gBAC7BzF,KAEM0F,KAAKN,KACvB,IAEIrF,EDNM4F,GADX,EAEoCR,qBAFpC,mBAEKS,EAFL,KAEkB1C,EAFlB,KAQF,GAJAI,qBAAU,WACNuC,IAAaC,cAGZ/F,EACD,OAAO,6CAGXmF,EAAc,2BACPA,GADO,IAEV9D,MAAO0D,EACPzD,OAAQ0D,EAAcC,IAG1BC,EAAU,2BACHA,GADG,IAEN7D,MAAO0D,EACPzD,OAAQ0D,GAAe,EAAIC,KAG/B,IAAM/B,EAAqB,CACvBlD,EAAKA,EAAKoC,OAAS8C,EAAWc,WAAW9F,KACzCF,EAAKA,EAAKoC,OAAS,GAAGlC,MAGpB+F,EAAaJ,EACf7F,EAAK1B,QAAO,SAAA2B,GAAC,OAAKA,EAAEC,KAAO2F,EAAY,IAAQ5F,EAAEC,KAAO2F,EAAY,MACpE7F,EAAK1B,QAAO,SAAA2B,GAAC,OAAKA,EAAEC,KAAOgD,EAAmB,IAAQjD,EAAEC,KAAOgD,EAAmB,MAEtF,OACI,qCACI,sBAAK7B,MAAO0D,EAAYzD,OAAQ0D,EAAhC,UACI,cAAC,EAAD,CACIhF,KAAMiG,EACNrE,MAAOuD,IAEX,mBAAGzG,UAAS,sBAAiBsG,EAAcC,EAA/B,KAAZ,SACI,cAAC,EAAD,CACIjF,KAAMA,EACN4B,MAAOsD,EACPhC,mBAAoBA,EACpBC,eAAgBA,SAI5B,cAAC,IAAD,CAAc+C,GAAG,eAAeC,MAAM,QAAQC,OAAO,QAAQC,MAAM,QE1ChEC,MArBf,WAcE,OACE,mCACE,cAAC,EAAD,CAAY1E,MAfG,CACjBmD,WAAY,KACZC,YAAa,IACbC,gBAAiB,GACjBE,eAAgB,CACdtD,OAAQ,CAAEI,IAAK,GAAID,MAAO,GAAIE,OAAQ,GAAIH,KAAM,KAElDmD,WAAY,CACVc,UAAW,IACXnE,OAAQ,CAAEI,IAAK,GAAID,MAAO,GAAIE,OAAQ,GAAIH,KAAM,IAChDkB,cAAe,SCDNsD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.c3960c0d.chunk.js","sourcesContent":["export const AxisBottom = ({ xScale, xLength, filterCondition, bandwidthOffset = 0, yOffset = 0, axisLine = false, tickFormat }) => {\r\n    const ticks = xScale.domain()\r\n        .filter(filterCondition)\r\n        .map(tickValue => (\r\n            <g\r\n                className='axis'\r\n                key={tickValue}\r\n                transform={`translate(${xScale(tickValue)},0)`}\r\n            >\r\n                {axisLine && <line y2={yOffset} />}\r\n                <line\r\n                    className='tick'\r\n                    y1={yOffset}\r\n                    y2={yOffset + 6}\r\n                />\r\n                <text\r\n                    style={{ textAnchor: 'middle' }}\r\n                    dy=\".71em\"\r\n                    y={yOffset + 14}\r\n                >\r\n                    {tickFormat(tickValue)}\r\n                </text>\r\n            </g>\r\n        ))\r\n\r\n    return (\r\n        <>\r\n            {ticks}\r\n            <line\r\n                className='axis-border'\r\n                y1={yOffset}\r\n                y2={yOffset}\r\n                x1={-bandwidthOffset}\r\n                x2={xLength + bandwidthOffset}\r\n            />\r\n        </>\r\n    )\r\n}","export const AxisLeft = ({ yScale, yLength, xOffset = 0, numTicks = null, tickFormat }) => {\r\n    const ticks = yScale.ticks(numTicks).map(tickValue => (\r\n        <g\r\n            className='axis'\r\n            key={tickValue}\r\n            transform={`translate(0,${yScale(tickValue)})`}\r\n        >\r\n            <line\r\n                className='tick'\r\n                x1={xOffset - 6}\r\n                x2={xOffset}\r\n            />\r\n            <text\r\n                style={{ textAnchor: 'end' }}\r\n                x={xOffset - 12}\r\n                dy=\".32em\"\r\n            >\r\n                {tickFormat(tickValue)}\r\n            </text>\r\n        </g>\r\n    ))\r\n\r\n    return (\r\n        <>\r\n            {ticks}\r\n            <line\r\n                className='axis-border'\r\n                x1={xOffset}\r\n                x2={xOffset}\r\n                y2={yLength}\r\n            />\r\n        </>\r\n    )\r\n}","export const AxisRight = ({ yScale, yLength, xOffset = 0, numTicks = null, tickFormat }) => {\r\n    const ticks = yScale.ticks(numTicks).map(tickValue => (\r\n        <g\r\n            className='axis'\r\n            key={tickValue}\r\n            transform={`translate(0,${yScale(tickValue)})`}\r\n        >\r\n            <line\r\n                className='tick'\r\n                x1={xOffset + 6}\r\n                x2={xOffset}\r\n            />\r\n            <text\r\n                style={{ textAnchor: 'start' }}\r\n                x={xOffset + 12}\r\n                dy=\".32em\"\r\n            >\r\n                {tickFormat(tickValue)}\r\n            </text>\r\n        </g>\r\n    ))\r\n\r\n    return (\r\n        <>\r\n            {ticks}\r\n            <line\r\n                className='axis-border'\r\n                x1={xOffset}\r\n                x2={xOffset}\r\n                y2={yLength}\r\n            />\r\n        </>\r\n    )\r\n}","import { utcFormat, format, schemeSet1 } from 'd3';\r\n\r\nconst formatDate = utcFormat('%B %-d, %Y');\r\nconst formatValue = format('.2f');\r\nconst formatString = format('.3s');\r\n\r\nexport const CandlestickMarks = ({ data, xScale, yScale }) => (\r\n    data.map(d => (\r\n        <g className='candlestick-mark' key={d.date} transform={`translate(${xScale(d.date)},0)`}>\r\n            <line\r\n                y1={yScale(d.low)}\r\n                y2={yScale(d.high)}\r\n            />\r\n            <line\r\n                y1={yScale(d.open)}\r\n                y2={yScale(d.close)}\r\n                strokeWidth={xScale.bandwidth()}\r\n                stroke={\r\n                    d.open > d.close ? schemeSet1[0]\r\n                        : d.close > d.open ? schemeSet1[2]\r\n                            : schemeSet1[8]\r\n                }\r\n                data-tip={\r\n                    `<b>${formatDate(d.date)}</b><br />` +\r\n                    `Open: $${formatValue(d.open)}<br />` +\r\n                    `Close: $${formatValue(d.close)}<br />` +\r\n                    `Low: $${formatValue(d.low)}<br />` +\r\n                    `High: $${formatValue(d.high)}<br />` +\r\n                    `Volume: ${formatString(d.volume)}`\r\n                }\r\n                data-for='mark-tooltip'\r\n            />\r\n        </g>\r\n    ))\r\n)","export const EventMarks = ({ data, xScale, innerHeight }) => (\r\n    data.map(d => (\r\n        d.eventTitle && (\r\n            <g\r\n                transform={`translate(${xScale(d.date)},${innerHeight}) scale(0.025,-0.025)`}\r\n                fill=\"#000000\"\r\n                stroke=\"none\"\r\n                data-tip={d.eventTitle}\r\n                data-for='mark-tooltip'\r\n                onClick={d.eventCallback}\r\n            >\r\n                <path d=\"M500 1394 c-132 -35 -260 -153 -334 -306 -65 -136 -80 -207 -80 -368 0 -161 15 -232 80 -368 95 -197 266 -322 444 -322 220 0 427 193 502 468 30 110 30 334 0 445 -46 166 -161 330 -284 404 -99 60 -217 77 -328 47z m260 -490 c0 -27 -4 -43 -10 -39 -5 3 -10 11 -10 17 0 6 -7 20 -17 30 -13 14 -31 18 -95 18 l-78 0 0 -90 0 -91 67 3 c64 3 69 5 83 33 l15 30 3 -37 c2 -21 2 -55 0 -75 l-3 -38 -15 30 c-14 28 -19 30 -83 33 l-68 3 3 -93 3 -93 55 -3 c90 -5 117 4 147 49 14 22 28 37 30 35 3 -3 -3 -27 -12 -55 l-17 -51 -171 1 c-125 1 -163 3 -139 10 l32 10 0 194 0 194 -32 10 c-24 7 14 9 140 10 l172 1 0 -46z\" />\r\n            </g>\r\n        )\r\n    ))\r\n)","export const VolumeMarks = ({ data, xScale, yScale, innerHeight }) => (\r\n    data.map(d => (\r\n        <rect\r\n            className='volume-mark'\r\n            key={d.date}\r\n            x={xScale(d.date) - xScale.bandwidth() / 2}\r\n            y={yScale(d.volume)}\r\n            width={xScale.bandwidth()}\r\n            height={innerHeight - yScale(d.volume)}\r\n        />\r\n    ))\r\n)","import * as d3 from 'd3';\r\n\r\nimport { AxisBottom } from './Axis/AxisBottom';\r\nimport { AxisLeft } from './Axis/AxisLeft';\r\nimport { AxisRight } from './Axis/AxisRight';\r\nimport { CandlestickMarks } from './Marks/CandlestickMarks';\r\nimport { EventMarks } from './Marks/EventMarks';\r\nimport { VolumeMarks } from './Marks/VolumeMarks';\r\n\r\nconst yAxisLabelOffset = 60;\r\n\r\nconst leftAxisTickFormat = d3.format('$~f');\r\nconst rightAxisTickFormat = d3.format('~s');\r\nconst bottomAxisTickFormat = d3.utcFormat('%-m/%-d');\r\n\r\nexport const Main = ({\r\n    data,\r\n    specs: { width, height, margin }\r\n}) => {\r\n    const innerWidth = width - margin.left - margin.right;\r\n    const innerHeight = height - margin.top - margin.bottom;\r\n\r\n    const xScale = d3.scaleBand()\r\n        .domain(d3.utcDay\r\n            .range(data[0].date, +data[data.length - 1].date + 1)\r\n            .filter(d => d.getUTCDay() !== 0 && d.getUTCDay() !== 6))\r\n        .range([0, innerWidth])\r\n        .padding(0.2);\r\n\r\n    const yPriceScale = d3.scaleLinear()\r\n        .domain([d3.min(data, d => d.low), d3.max(data, d => d.high)])\r\n        .rangeRound([innerHeight, 0])\r\n        .nice();\r\n\r\n    const yVolumeScale = d3.scaleLinear()\r\n        .domain([0, d3.max(data, d => d.volume)])\r\n        .rangeRound([innerHeight, 0])\r\n        .nice();\r\n\r\n    const getOnlyMonday = d => d.getUTCDay() === 1;\r\n\r\n    return (\r\n        <g transform={`translate(${margin.left},${margin.top})`}>\r\n            <AxisBottom\r\n                xScale={xScale}\r\n                xLength={innerWidth}\r\n                filterCondition={getOnlyMonday}\r\n                yOffset={innerHeight}\r\n                bandwidthOffset={xScale.bandwidth() / 2}\r\n                axisLine={true}\r\n                tickFormat={bottomAxisTickFormat}\r\n            />\r\n            <AxisLeft\r\n                yScale={yPriceScale}\r\n                yLength={innerHeight}\r\n                xOffset={-xScale.bandwidth() / 2}\r\n                tickFormat={leftAxisTickFormat}\r\n            />\r\n            <text\r\n                className='axis-label'\r\n                textAnchor='middle'\r\n                transform={`translate(${-yAxisLabelOffset},${innerHeight / 2}) rotate(-90)`}\r\n            >\r\n                Price\r\n            </text>\r\n            <AxisRight\r\n                yScale={yVolumeScale}\r\n                yLength={innerHeight}\r\n                xOffset={innerWidth + xScale.bandwidth() / 2}\r\n                tickFormat={rightAxisTickFormat}\r\n            />\r\n            <text\r\n                className='axis-label'\r\n                textAnchor='middle'\r\n                transform={`translate(${innerWidth + yAxisLabelOffset},${innerHeight / 2}) rotate(90)`}\r\n            >\r\n                Volume\r\n            </text>\r\n            <VolumeMarks\r\n                data={data}\r\n                xScale={xScale}\r\n                yScale={yVolumeScale}\r\n                innerHeight={innerHeight}\r\n            />\r\n            <CandlestickMarks\r\n                data={data}\r\n                xScale={xScale}\r\n                yScale={yPriceScale}\r\n            />\r\n            <EventMarks\r\n                data={data}\r\n                xScale={xScale}\r\n                innerHeight={innerHeight}\r\n            />\r\n        </g>\r\n    )\r\n}","import { area, curveNatural } from 'd3';\r\n\r\nexport const LineMarks = ({ data, xScale, yScale }) => (\r\n    <path\r\n        className='line-mark'\r\n        d={area()\r\n            .x(d => xScale(d.date))\r\n            .y0(yScale(0))\r\n            .y1(d => yScale(d.close))\r\n            .curve(curveNatural)(data)}\r\n    />\r\n)","import { useRef, useEffect, useMemo } from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nimport { AxisBottom } from './Axis/AxisBottom';\r\nimport { AxisLeft } from './Axis/AxisLeft';\r\nimport { LineMarks } from './Marks/LineMarks';\r\n\r\nconst yAxisLabelOffset = 60;\r\n\r\nconst leftAxisTickFormat = d3.format('$~f');\r\nconst bottomAxisTickFormat = d3.utcFormat('%Y');\r\n\r\nconst scaleBandInvert = scale => {\r\n    const domain = scale.domain();\r\n    const paddingOuter = scale(domain[0]);\r\n    const eachBand = scale.step();\r\n    return (value => {\r\n        const index = Math.floor(((value - paddingOuter) / eachBand));\r\n        return domain[Math.max(0, Math.min(index, domain.length - 1))];\r\n    })\r\n}\r\n\r\nexport const Brush = ({\r\n    data,\r\n    specs: { width, height, margin, yAxisNumTicks },\r\n    initialBrushExtent,\r\n    setBrushExtent\r\n}) => {\r\n    const brushRef = useRef();\r\n\r\n    const innerWidth = width - margin.left - margin.right;\r\n    const innerHeight = height - margin.top - margin.bottom;\r\n\r\n    const xScale = useMemo(\r\n        () => d3.scaleBand()\r\n            .domain(d3.utcDay\r\n                .range(data[0].date, +data[data.length - 1].date + 1)\r\n                .filter(d => d.getUTCDay() !== 0 && d.getUTCDay() !== 6))\r\n            .range([0, innerWidth])\r\n            .padding(0.2)\r\n        , [data, innerWidth]\r\n    );\r\n\r\n    const yPriceScale = useMemo(\r\n        () => d3.scaleLinear()\r\n            .domain([0, d3.max(data, d => d.high)])\r\n            .range([innerHeight, 0])\r\n            .nice()\r\n        , [data, innerHeight]\r\n    );\r\n\r\n    useEffect(() => {\r\n        const brush = d3.brushX()\r\n            .extent([[0, 0], [innerWidth, innerHeight]])\r\n            .on('brush', (event) => {\r\n                setBrushExtent(event.selection && event.selection.map(scaleBandInvert(xScale)))\r\n            });\r\n        const brushObj = d3.select(brushRef.current);\r\n        brush(brushObj);\r\n        brush.move(brushObj, [xScale(initialBrushExtent[0]), xScale(initialBrushExtent[1])]);\r\n    }, [xScale, innerWidth, innerHeight]);\r\n\r\n    const getFirstMondayOfYear = d => (\r\n        (d.getUTCDay() === 1) && (d.getUTCDate() <= 7) && (d.getUTCMonth() === 0)\r\n    );\r\n\r\n    return (\r\n        <g transform={`translate(${margin.left},${margin.top})`}>\r\n            <LineMarks\r\n                data={data}\r\n                xScale={xScale}\r\n                yScale={yPriceScale}\r\n            />\r\n            <AxisBottom\r\n                xScale={xScale}\r\n                xLength={innerWidth}\r\n                yOffset={innerHeight}\r\n                filterCondition={getFirstMondayOfYear}\r\n                tickFormat={bottomAxisTickFormat}\r\n            />\r\n            <AxisLeft\r\n                yScale={yPriceScale}\r\n                yLength={innerHeight}\r\n                numTicks={yAxisNumTicks}\r\n                tickFormat={leftAxisTickFormat}\r\n            />\r\n            <text\r\n                className='axis-label'\r\n                textAnchor='middle'\r\n                transform={`translate(${-yAxisLabelOffset},${innerHeight / 2}) rotate(-90)`}\r\n            >\r\n                Price\r\n            </text>\r\n            <g ref={brushRef} />\r\n        </g>\r\n    )\r\n}","import { useState, useEffect } from 'react';\r\nimport ReactTooltip from 'react-tooltip';\r\n\r\nimport '../styles/charts.css';\r\nimport { useData } from './useData';\r\nimport { Main } from './Main'\r\nimport { Brush } from './Brush'\r\n\r\nexport const StockChart = ({\r\n    specs: {\r\n        totalWidth,\r\n        totalHeight,\r\n        seperationRatio,\r\n        brushSpecs,\r\n        mainChartSpecs\r\n    }\r\n}) => {\r\n    const data = useData();\r\n    const [brushExtent, setBrushExtent] = useState();\r\n\r\n    useEffect(() => {\r\n        ReactTooltip.rebuild();\r\n    });\r\n\r\n    if (!data) {\r\n        return <pre>Loading...</pre>;\r\n    }\r\n\r\n    mainChartSpecs = {\r\n        ...mainChartSpecs,\r\n        width: totalWidth,\r\n        height: totalHeight * seperationRatio\r\n    }\r\n\r\n    brushSpecs = {\r\n        ...brushSpecs,\r\n        width: totalWidth,\r\n        height: totalHeight * (1 - seperationRatio)\r\n    }\r\n\r\n    const initialBrushExtent = [\r\n        data[data.length - brushSpecs.brushSize].date,\r\n        data[data.length - 1].date\r\n    ];\r\n\r\n    const slicedData = brushExtent ?\r\n        data.filter(d => (d.date > brushExtent[0]) && (d.date < brushExtent[1])) :\r\n        data.filter(d => (d.date > initialBrushExtent[0]) && (d.date < initialBrushExtent[1]));\r\n\r\n    return (\r\n        <>\r\n            <svg width={totalWidth} height={totalHeight}>\r\n                <Main\r\n                    data={slicedData}\r\n                    specs={mainChartSpecs}\r\n                />\r\n                <g transform={`translate(0,${totalHeight * seperationRatio})`}>\r\n                    <Brush\r\n                        data={data}\r\n                        specs={brushSpecs}\r\n                        initialBrushExtent={initialBrushExtent}\r\n                        setBrushExtent={setBrushExtent}\r\n                    />\r\n                </g>\r\n            </svg>\r\n            <ReactTooltip id='mark-tooltip' place='right' effect='solid' html={true} />\r\n        </>\r\n    )\r\n}","import { useState, useEffect } from 'react';\r\nimport { csv } from 'd3';\r\n\r\nconst csvUrl = 'https://gist.githubusercontent.com/alvin-yang68/825378ee22558f0ced78a2ca74c931a7/raw/AAPLStockHistory.csv'\r\n\r\nexport const useData = () => {\r\n    const [data, setData] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const row = d => {\r\n            d.date = new Date(d.date);\r\n            d.volume = +d.volume;\r\n            d.open = +d.open;\r\n            d.close = +d.close;\r\n            d.high = +d.high;\r\n            d.low = +d.low;\r\n            d.eventTitle = Math.random() < 0.05 ? 'This is an event' : null;\r\n            d.eventCallback = () => console.log('Hello world');\r\n            return d;\r\n        }\r\n        csv(csvUrl, row).then(setData);\r\n    }, [])\r\n\r\n    return data;\r\n}","import { StockChart } from './charts/StockChart'\n\nfunction App() {\n  const chartSpecs = {\n    totalWidth: 1200,\n    totalHeight: 750,\n    seperationRatio: 0.8,\n    mainChartSpecs: {\n      margin: { top: 20, right: 80, bottom: 40, left: 80 }\n    },\n    brushSpecs: {\n      brushSize: 130,\n      margin: { top: 20, right: 80, bottom: 40, left: 80 },\n      yAxisNumTicks: 5\n    }\n  }\n  return (\n    <>\n      <StockChart specs={chartSpecs} />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}